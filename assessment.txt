# assessment2

1.1 SDLC stands for Software Development Life Cycle.

1.2 In Python, the error is ZeroDivisionError: division by zero

1.3 git push

1.4 NULL represents a particular field in the table lack of a value

1.5 Facilitate the Scrum process: The Scrum Master ensures that the Scrum process is rigorously followed by the team. This includes conducting Scrum ceremonies such as Sprint Planning, Daily Standup, Sprint Review, and Sprint Retrospective.

Facilitate communication: The Scrum Master is responsible for ensuring that there is clear communication between the team, the Product Owner, and any other stakeholders.

1.6 

 1.Debug ‘xx.py’ option in Pycharm. can set breakpoints, and run line by line. Using it when the code is complex and I don’t know the whole process of the code.

1. write log() in some function to see if the code is called and what value it passed. Simply, and use when I know which part maybe wrong.

1.7 If inputs are not numeric values, such as strings, a TypeError would occur when compare them.

```sql
def can_pay(price, cash_given):
    try:
        if cash_given>= price:
            return True
        else:
            return False
    except TypeError:
        print("Error: Invalid input type. Please provide numeric values for price and cash_given.")
```

1.8 Git branching allows the management of multiple lines of development within a single repository. It enables developers to work on the project simultaneously without interfering with each other's work. and developers can see the history changes and have a chance to clean up the changed code if it is wrong before merging it into the main branch. 

1. git branch <branch-name> to create a Branch
2. git checkout <branch-name> to move to the newly created branch
3. `git commit -m "Your commit message here”`  to add new commits
4. `git push origin <branch-name>` to push commits to the remote branch

1.9 

Order process: The system should have process that customers can see, select, delete and submit orders.

Kitchen Management: The system should have features to notify kitchen for incoming orders.

Menu Management: The system should allow restaurant staff to manage the menu by adding, updating, and removing items, changing their prices, descriptions, and showing sold out.

payment: The system should have a payment process that customer can pay by card or cash.

Reporting: The system should generate reports on the total turnover for a day or a month, and popular items, order frequency, time of order, to help analyze performance and make data-driven decisions.

**Considered:**

Usability: The user interface should be user-friendly for both customers and restaurant staff.
Real-Time Updates: The system should provide real-time updates to staff.

Security: The system should ensure the security of customer data and payment security.

**Components:**

1. Backend: Python by Django
2. Frontend  JavaScript by React
3. Database: MySQL
4. APIs: third-party payment API
5. Mobile App Development: React Native
6. Cloud Services: AWS